# .github/workflows/base-image.yml

name: Sync and Update Specific Branches from Upstream

on:
  workflow_dispatch:

jobs:
  sync_and_update:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Target Repository (engels74/base-image)
        uses: actions/checkout@v4
        with:
          repository: engels74/base-image
          token: ${{ secrets.GH_PAT }}
          fetch-depth: 0

      - name: Configure Git for base-image
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

      - name: Add Upstream Remote
        run: git remote add upstream https://github.com/hotio/base.git

      - name: Fetch Upstream Branches
        run: git fetch upstream

      - name: Process Branches in base-image
        run: |
          set -e

          BRANCHES_TO_SYNC="alpinevpn jammyvpn noblevpn"
          TARGET_REPO_OWNER="engels74"
          UPSTREAM_REPO_OWNER="hotio"

          for branch in $BRANCHES_TO_SYNC; do
            echo "--- Processing branch: $branch ---"

            git checkout -B "$branch" "upstream/$branch"
            if [ $? -ne 0 ]; then
              echo "Error checking out or resetting branch $branch from upstream/$branch. Skipping."
              continue
            fi

            echo "Applying modifications to files on branch '$branch'..."

            # 1. Update .github/workflows/call-build.yml
            CALL_BUILD=".github/workflows/call-build.yml"
            if [[ -f "$CALL_BUILD" ]]; then
                sed -i 's|hotio/build-workflow/.github/workflows/build-on-call.yml@master|engels74/docker-build-workflow/.github/workflows/build-on-call.yml@master|' "$CALL_BUILD"
                echo "Updated $CALL_BUILD"
            else
                echo "File not found: $CALL_BUILD (Skipping update)"
            fi

            # 2. Update both Dockerfiles at root
            for DOCKERFILE in linux-amd64.Dockerfile linux-arm64.Dockerfile; do
              if [[ -f "$DOCKERFILE" ]]; then
                echo "Modifying $DOCKERFILE..."

                # Use awk to replace the block between '# install root-files' and 'chmod +x /etc/s6-overlay/init-hook'
                awk '
                  BEGIN {in_block=0}
                  /^# install root-files/ {print; in_block=1; next}
                  in_block && /^RUN curl -fsSL "https:\/\/github.com\/hotio\/root-files-archive\/\$\{VERSION_ROOT_FILES\}.tar.gz"/ {next}
                  in_block && /chmod \+x \/etc\/s6-overlay\/init-hook/ {
                    # Output the new block
                    print "RUN curl -fsSL \"https://github.com/hotio/root-files/archive/${VERSION_ROOT_FILES}.tar.gz\" | tar zpxf - -C / \"root-files-${VERSION_ROOT_FILES}/root\" --strip-components=2 && \\"
                    print "    chmod +x /etc/s6-overlay/init-hook && \\"
                    print "    sed -i '/figlet/ s/hotio/engels74/; \\"
                    print "            /Donate:/ s|https://hotio.dev/donate|https://engels74.net/donate|; \\"
                    print "            /Documentation:/ s|https://hotio.dev|https://engels74.net|; \\"
                    print "            /Support:/ s|https://hotio.dev/discord|https://github.com/engels74/$(jq -r \x27.app\x27 <<< \"$(base64 --decode <<< \"${IMAGE_STATS}\")\")/issues|' \\"
                    print "        /etc/s6-overlay/s6-rc.d/init-setup/run"
                    in_block=0
                    next
                  }
                  !in_block {print}
                ' "$DOCKERFILE" > "${DOCKERFILE}.tmp" && mv "${DOCKERFILE}.tmp" "$DOCKERFILE"

                echo "Updated $DOCKERFILE"
              else
                echo "File not found: $DOCKERFILE (Skipping update)"
              fi
            done

            # 3. Overwrite README.md using printf
            README="README.md"
            echo "Overwriting $README using printf..."
            printf '%s\n' \
              '# base-image (engels74)' \
              '' \
              '## For full documentation' \
              '' \
              'Detailed information and documentation available on the [master branch README](https://github.com/engels74/base-image/tree/master).' > "$README"
            echo "Overwritten $README"

            # 4. Commit the changes if any
            echo "Checking for changes on branch '$branch'..."
            if [[ -n $(git status --porcelain) ]]; then
              echo "Changes detected. Committing..."
              git add .
              git commit -m "Sync with upstream ($UPSTREAM_REPO_OWNER/base@$branch) and apply custom updates"
              echo "Force pushing branch '$branch' to origin..."
              git push origin "$branch" --force
            else
              echo "No changes detected on branch '$branch' after modifications."
            fi

            echo "--- Finished processing branch: $branch ---"
            echo ""
          done

          echo "All specified branches processed."

      - name: Checkout Repo Patches Repository
        uses: actions/checkout@v4
        with:
          repository: engels74/repo-patches
          token: ${{ secrets.GH_PAT }}
          path: repo-patches
          ref: main

      - name: Create and Push Empty Commit to Repo Patches
        working-directory: ./repo-patches
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git commit --allow-empty -m "chore: Trigger downstream workflows [skip ci]"
          git push origin main
          echo "Empty commit pushed to engels74/repo-patches on branch main."
