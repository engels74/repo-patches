# .github/workflows/base-image.yml

name: Sync and Update Specific Branches from Upstream

# Allow manual triggering
on:
  workflow_dispatch:

jobs:
  sync_and_update:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Target Repository (engels74/base-image)
        uses: actions/checkout@v4
        with:
          repository: engels74/base-image
          token: ${{ secrets.GH_PAT }}
          fetch-depth: 0

      - name: Configure Git for base-image
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

      - name: Add Upstream Remote
        run: git remote add upstream https://github.com/hotio/base.git

      - name: Fetch Upstream Branches
        run: git fetch upstream

      - name: Process Branches in base-image
        run: |
          set -e # Exit immediately if a command exits with a non-zero status.

          BRANCHES_TO_SYNC="alpinevpn jammyvpn noblevpn"
          TARGET_REPO_OWNER="engels74"
          UPSTREAM_REPO_OWNER="hotio"

          # Define the text block to append in Dockerfiles after the chmod line
          # Use single quotes for the outer shell variable to prevent premature expansion
          # Escape internal single quotes with \x27 for sed
          # Escape backslashes needed by sed 'a\' command and line continuation
          # Escape the $ in $(jq...) so it's interpreted inside the Dockerfile RUN, not by the workflow shell
          # Ensure indentation within this variable matches the desired Dockerfile format
          export DOCKERFILE_APPEND_TEXT=' && \\\
              sed -i \x27/figlet/ s/hotio/engels74/; \\\
                      /Donate:/ s|https://hotio.dev/donate|https://engels74.net/donate|; \\\
                      /Documentation:/ s|https://hotio.dev|https://engels74.net|; \\\
                      /Support:/ s|https://hotio.dev/discord|https://github.com/engels74/$(jq -r \\x27.app\\x27 <<< "$(base64 --decode <<< "${IMAGE_STATS}")")/issues|\x27 \\\
                  /etc/s6-overlay/s6-rc.d/init-setup/run'

          for branch in $BRANCHES_TO_SYNC; do
            echo "--- Processing branch: $branch ---"

            # 1. Checkout the branch
            echo "Checking out and resetting local branch '$branch' to 'upstream/$branch'..."
            git checkout -B "$branch" "upstream/$branch"
            if [ $? -ne 0 ]; then
              echo "Error checking out or resetting branch $branch from upstream/$branch. Skipping."
              continue
            fi

            # 2. Run the modification script logic directly
            echo "Applying modifications to files on branch '$branch'..."

            # 2a. Update .github/workflows/call-build.yml
            CALL_BUILD=".github/workflows/call-build.yml"
            if [[ -f "$CALL_BUILD" ]]; then
                # Use a different delimiter like '#' for sed to avoid issues with slashes in paths
                sed -i 's|hotio/build-workflow/.github/workflows/build-on-call.yml@master|engels74/docker-build-workflow/.github/workflows/build-on-call.yml@master|' "$CALL_BUILD"
                echo "Updated $CALL_BUILD"
            else
                echo "File not found: $CALL_BUILD (Skipping update)"
            fi

            # 2b. Update Dockerfiles by appending sed command to the root-files RUN block
            DOCKERFILE_AMD64="linux-amd64.Dockerfile"
            DOCKERFILE_ARM64="linux-arm64.Dockerfile"
            # Regex pattern for the line *after which* to append the text
            # Matches the line exactly, including indentation
            TARGET_LINE_PATTERN='^    chmod \+x /etc/s6-overlay/init-hook$'

            echo "Attempting to update Dockerfiles..."
            for dockerfile in "$DOCKERFILE_AMD64" "$DOCKERFILE_ARM64"; do
              if [[ -f "$dockerfile" ]]; then
                  # Check if the modification is already present to avoid duplicate appends
                  if grep -q '/etc/s6-overlay/s6-rc.d/init-setup/run' "$dockerfile"; then
                      echo "Modification already seems present in $dockerfile. Skipping append."
                  else
                      # Use '#' as delimiter for sed address to avoid escaping slashes
                      # Use the 'a\' command to append the exported text block *after* the matched line
                      sed -i '\#'"$TARGET_LINE_PATTERN"'#a\'"$DOCKERFILE_APPEND_TEXT" "$dockerfile"
                      echo "Updated $dockerfile"
                  fi
              else
                  echo "File not found: $dockerfile (Skipping update)"
              fi
            done

            # 2c. Overwrite README.md using printf (YAML safe)
            README="README.md"
            echo "Overwriting $README using printf..."
            printf '%s\n' \
              '# base-image (engels74)' \
              '' \
              '## For full documentation' \
              '' \
              'Detailed information and documentation available on the [master branch README](https://github.com/engels74/base-image/tree/master).' > "$README"
            echo "Overwritten $README"

            # 3. Commit the changes if any
            echo "Checking for changes on branch '$branch'..."
            if [[ -n $(git status --porcelain) ]]; then
              echo "Changes detected. Committing..."
              git add .
              git commit -m "Sync with upstream ($UPSTREAM_REPO_OWNER/base@$branch) and apply custom updates"

              # 4. Force push the changes
              echo "Force pushing branch '$branch' to origin..."
              git push origin "$branch" --force
            else
              echo "No changes detected on branch '$branch' after modifications."
            fi

            echo "--- Finished processing branch: $branch ---"
            echo "" # Add a newline for readability
          done

          echo "All specified branches processed."

      - name: Checkout Repo Patches Repository
        uses: actions/checkout@v4
        with:
          repository: engels74/repo-patches
          token: ${{ secrets.GH_PAT }}
          path: repo-patches
          ref: main

      - name: Create and Push Empty Commit to Repo Patches
        working-directory: ./repo-patches
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git commit --allow-empty -m "chore: Trigger downstream workflows [skip ci]"
          git push origin main
          echo "Empty commit pushed to engels74/repo-patches on branch main."
