# .github/workflows/sync_and_update_branches.yml

name: Sync and Update Specific Branches from Upstream

# Allow manual triggering
on:
  workflow_dispatch:

jobs:
  sync_and_update:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Target Repository (engels74/base-image)
        uses: actions/checkout@v4
        with:
          # Checkout the specific repository you want to modify
          repository: engels74/base-image
          # Use the fine-grained PAT stored as a secret
          token: ${{ secrets.GH_PAT }}
          # Fetch all history so we can switch branches and reset
          fetch-depth: 0

      - name: Configure Git
        # Configure git using the PAT user context implicitly provided by checkout
        # Or explicitly set a bot user if preferred
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

      - name: Add Upstream Remote
        run: git remote add upstream https://github.com/hotio/base.git

      - name: Fetch Upstream Branches
        run: git fetch upstream

      - name: Process Branches
        # Use the literal block scalar '|' and ensure all script lines below are indented
        run: |
          set -e # Exit immediately if a command exits with a non-zero status.

          BRANCHES_TO_SYNC="alpinevpn jammyvpn noblevpn"
          TARGET_REPO_OWNER="engels74" # Your username/org
          UPSTREAM_REPO_OWNER="hotio" # Upstream username/org

          for branch in $BRANCHES_TO_SYNC; do
            echo "--- Processing branch: $branch ---"

            # 1. Checkout the branch (create if it doesn't exist locally)
            #    Use -B to create or reset the branch
            echo "Checking out and resetting local branch '$branch' to 'upstream/$branch'..."
            git checkout -B "$branch" "upstream/$branch"
            if [ $? -ne 0 ]; then
              echo "Error checking out or resetting branch $branch from upstream/$branch. Skipping."
              continue # Skip to the next branch if checkout/reset fails
            fi

            # 2. Run the modification script logic directly
            echo "Applying modifications to files on branch '$branch'..."

            # 2a. Update .github/workflows/call-build.yml
            CALL_BUILD=".github/workflows/call-build.yml"
            if [[ -f "$CALL_BUILD" ]]; then
                # Use a different delimiter like '#' for sed to avoid issues with slashes in paths
                sed -i 's|hotio/build-workflow/.github/workflows/build-on-call.yml@master|engels74/docker-build-workflow/.github/workflows/build-on-call.yml@master|' "$CALL_BUILD"
                echo "Updated $CALL_BUILD"
            else
                echo "File not found: $CALL_BUILD (Skipping update)"
            fi

            # 2b. Update root/etc/s6-overlay/s6-rc.d/init-setup/run
            INIT_RUN="root/etc/s6-overlay/s6-rc.d/init-setup/run"
            if [[ -f "$INIT_RUN" ]]; then
                # Use a different delimiter like '#' for sed to avoid issues with slashes in paths
                sed -i \
                    -e 's/$(figlet "hotio")/$(figlet "engels74")/' \
                    -e 's|https://hotio.dev/donate|https://engels74.net/donate|' \
                    -e 's|https://hotio.dev|https://engels74.net|g' \
                    -e 's|Support:.*|Support:       https://github.com/engels74/base-image/issues|' \
                    "$INIT_RUN"
                echo "Updated $INIT_RUN"
            else
                echo "File not found: $INIT_RUN (Skipping update)"
            fi

            # 2c. Overwrite README.md using printf (YAML safe)
            README="README.md"
            echo "Overwriting $README using printf..."
            # Use printf with %s\n for each line. This avoids heredoc issues.
            # Ensure this whole printf command block maintains the script's indentation level.
            printf '%s\n' \
              '# base-image (engels74)' \
              '' \
              '## For full documentation' \
              '' \
              'Detailed information and documentation available on the [master branch README](https://github.com/engels74/base-image/tree/master).' > "$README"
            echo "Overwritten $README"

            # 3. Commit the changes if any
            echo "Checking for changes on branch '$branch'..."
            # Use git status --porcelain to see if there are changes
            if [[ -n $(git status --porcelain) ]]; then
              echo "Changes detected. Committing..."
              git add .
              git commit -m "Sync with upstream ($UPSTREAM_REPO_OWNER/base@$branch) and apply custom updates"

              # 4. Force push the changes
              # Git push will use the credentials associated with the checkout token (GH_PAT)
              echo "Force pushing branch '$branch' to origin..."
              git push origin "$branch" --force
            else
              echo "No changes detected on branch '$branch' after modifications."
              # Optional: Still force push if you want to ensure it matches upstream even if script made no changes
              # echo "Force pushing branch '$branch' to ensure alignment with upstream..."
              # git push origin "$branch" --force
            fi

            echo "--- Finished processing branch: $branch ---"
            echo "" # Add a newline for readability
          done

          echo "All specified branches processed."
